// Code generated by mockery v2.43.2. DO NOT EDIT.

package repositories_mocks

import (
	models "hex/mjolnir-core/pkg/models"

	mock "github.com/stretchr/testify/mock"
)

// MockProductRepository is an autogenerated mock type for the ProductRepository type
type MockProductRepository struct {
	mock.Mock
}

type MockProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductRepository) EXPECT() *MockProductRepository_Expecter {
	return &MockProductRepository_Expecter{mock: &_m.Mock}
}

// CreateProduct provides a mock function with given fields: product
func (_m *MockProductRepository) CreateProduct(product models.Product) (models.Product, error) {
	ret := _m.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Product) (models.Product, error)); ok {
		return rf(product)
	}
	if rf, ok := ret.Get(0).(func(models.Product) models.Product); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	if rf, ok := ret.Get(1).(func(models.Product) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductRepository_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockProductRepository_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - product models.Product
func (_e *MockProductRepository_Expecter) CreateProduct(product interface{}) *MockProductRepository_CreateProduct_Call {
	return &MockProductRepository_CreateProduct_Call{Call: _e.mock.On("CreateProduct", product)}
}

func (_c *MockProductRepository_CreateProduct_Call) Run(run func(product models.Product)) *MockProductRepository_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Product))
	})
	return _c
}

func (_c *MockProductRepository_CreateProduct_Call) Return(_a0 models.Product, _a1 error) *MockProductRepository_CreateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProductRepository_CreateProduct_Call) RunAndReturn(run func(models.Product) (models.Product, error)) *MockProductRepository_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllProducts provides a mock function with given fields:
func (_m *MockProductRepository) GetAllProducts() ([]models.Product, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllProducts")
	}

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductRepository_GetAllProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProducts'
type MockProductRepository_GetAllProducts_Call struct {
	*mock.Call
}

// GetAllProducts is a helper method to define mock.On call
func (_e *MockProductRepository_Expecter) GetAllProducts() *MockProductRepository_GetAllProducts_Call {
	return &MockProductRepository_GetAllProducts_Call{Call: _e.mock.On("GetAllProducts")}
}

func (_c *MockProductRepository_GetAllProducts_Call) Run(run func()) *MockProductRepository_GetAllProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProductRepository_GetAllProducts_Call) Return(_a0 []models.Product, _a1 error) *MockProductRepository_GetAllProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProductRepository_GetAllProducts_Call) RunAndReturn(run func() ([]models.Product, error)) *MockProductRepository_GetAllProducts_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductById provides a mock function with given fields: id
func (_m *MockProductRepository) GetProductById(id uint) (models.Product, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductById")
	}

	var r0 models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (models.Product, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) models.Product); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductRepository_GetProductById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductById'
type MockProductRepository_GetProductById_Call struct {
	*mock.Call
}

// GetProductById is a helper method to define mock.On call
//   - id uint
func (_e *MockProductRepository_Expecter) GetProductById(id interface{}) *MockProductRepository_GetProductById_Call {
	return &MockProductRepository_GetProductById_Call{Call: _e.mock.On("GetProductById", id)}
}

func (_c *MockProductRepository_GetProductById_Call) Run(run func(id uint)) *MockProductRepository_GetProductById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockProductRepository_GetProductById_Call) Return(_a0 models.Product, _a1 error) *MockProductRepository_GetProductById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProductRepository_GetProductById_Call) RunAndReturn(run func(uint) (models.Product, error)) *MockProductRepository_GetProductById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProductRepository creates a new instance of MockProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductRepository {
	mock := &MockProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
