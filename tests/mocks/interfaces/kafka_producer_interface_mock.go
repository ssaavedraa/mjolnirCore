// Code generated by mockery v2.43.2. DO NOT EDIT.

package interfaces_mocks

import mock "github.com/stretchr/testify/mock"

// MockKafkaProducerInterface is an autogenerated mock type for the KafkaProducerInterface type
type MockKafkaProducerInterface struct {
	mock.Mock
}

type MockKafkaProducerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKafkaProducerInterface) EXPECT() *MockKafkaProducerInterface_Expecter {
	return &MockKafkaProducerInterface_Expecter{mock: &_m.Mock}
}

// CloseKafkaProducer provides a mock function with given fields:
func (_m *MockKafkaProducerInterface) CloseKafkaProducer() {
	_m.Called()
}

// MockKafkaProducerInterface_CloseKafkaProducer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseKafkaProducer'
type MockKafkaProducerInterface_CloseKafkaProducer_Call struct {
	*mock.Call
}

// CloseKafkaProducer is a helper method to define mock.On call
func (_e *MockKafkaProducerInterface_Expecter) CloseKafkaProducer() *MockKafkaProducerInterface_CloseKafkaProducer_Call {
	return &MockKafkaProducerInterface_CloseKafkaProducer_Call{Call: _e.mock.On("CloseKafkaProducer")}
}

func (_c *MockKafkaProducerInterface_CloseKafkaProducer_Call) Run(run func()) *MockKafkaProducerInterface_CloseKafkaProducer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKafkaProducerInterface_CloseKafkaProducer_Call) Return() *MockKafkaProducerInterface_CloseKafkaProducer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockKafkaProducerInterface_CloseKafkaProducer_Call) RunAndReturn(run func()) *MockKafkaProducerInterface_CloseKafkaProducer_Call {
	_c.Call.Return(run)
	return _c
}

// InitKafkaProducer provides a mock function with given fields: brokers
func (_m *MockKafkaProducerInterface) InitKafkaProducer(brokers []string) error {
	ret := _m.Called(brokers)

	if len(ret) == 0 {
		panic("no return value specified for InitKafkaProducer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(brokers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKafkaProducerInterface_InitKafkaProducer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitKafkaProducer'
type MockKafkaProducerInterface_InitKafkaProducer_Call struct {
	*mock.Call
}

// InitKafkaProducer is a helper method to define mock.On call
//   - brokers []string
func (_e *MockKafkaProducerInterface_Expecter) InitKafkaProducer(brokers interface{}) *MockKafkaProducerInterface_InitKafkaProducer_Call {
	return &MockKafkaProducerInterface_InitKafkaProducer_Call{Call: _e.mock.On("InitKafkaProducer", brokers)}
}

func (_c *MockKafkaProducerInterface_InitKafkaProducer_Call) Run(run func(brokers []string)) *MockKafkaProducerInterface_InitKafkaProducer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockKafkaProducerInterface_InitKafkaProducer_Call) Return(_a0 error) *MockKafkaProducerInterface_InitKafkaProducer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKafkaProducerInterface_InitKafkaProducer_Call) RunAndReturn(run func([]string) error) *MockKafkaProducerInterface_InitKafkaProducer_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessageToKafka provides a mock function with given fields: topic, message
func (_m *MockKafkaProducerInterface) SendMessageToKafka(topic string, message []byte) error {
	ret := _m.Called(topic, message)

	if len(ret) == 0 {
		panic("no return value specified for SendMessageToKafka")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(topic, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKafkaProducerInterface_SendMessageToKafka_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessageToKafka'
type MockKafkaProducerInterface_SendMessageToKafka_Call struct {
	*mock.Call
}

// SendMessageToKafka is a helper method to define mock.On call
//   - topic string
//   - message []byte
func (_e *MockKafkaProducerInterface_Expecter) SendMessageToKafka(topic interface{}, message interface{}) *MockKafkaProducerInterface_SendMessageToKafka_Call {
	return &MockKafkaProducerInterface_SendMessageToKafka_Call{Call: _e.mock.On("SendMessageToKafka", topic, message)}
}

func (_c *MockKafkaProducerInterface_SendMessageToKafka_Call) Run(run func(topic string, message []byte)) *MockKafkaProducerInterface_SendMessageToKafka_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockKafkaProducerInterface_SendMessageToKafka_Call) Return(_a0 error) *MockKafkaProducerInterface_SendMessageToKafka_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKafkaProducerInterface_SendMessageToKafka_Call) RunAndReturn(run func(string, []byte) error) *MockKafkaProducerInterface_SendMessageToKafka_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKafkaProducerInterface creates a new instance of MockKafkaProducerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKafkaProducerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKafkaProducerInterface {
	mock := &MockKafkaProducerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
